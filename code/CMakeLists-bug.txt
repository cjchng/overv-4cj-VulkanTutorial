cmake_minimum_required(VERSION 3.23)

# set the cmp0111 policy
cmake_policy(SET CMP0111 NEW)

# your existing cmake configuration
project(vulkantutorial)

#the following 2 lines is replaced by config vulkan_sdk by ~/.profile
#set(vulkan_sdk "/home/cj/documents/vulkan-2024/lunarg-4cj-/1.3.290.0/x86_64")
#message( status  " vulkan_sdk :${vulkan_sdk}")
#set(vulkan_sdk "/home/cj/Documents/Vulkan-2024/LunarG-4cj-/1.3.290.0/x86_64/lib/cmake/VulkanLoader")

set(CMAKE_PREFIX_PATH "$ENV{VULKAN_SDK}")
message( status  " CMAKE_PREFIX_PATH :${CMAKE_PREFIX_PATH}")
#set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${vulkan_sdk}/lib/cmake")
#cj-junk- message( fatal_error  " vulkan_sdk :${vulkan_sdk}")
# set target properties
#set_target_properties(glslang::validator properties <property> <value>)
find_package (glfw3 REQUIRED)
find_package (glm REQUIRED)
find_package (vulkan REQUIRED)
find_package (tinyobjloader REQUIRED)

#find_package (pkgconfig)
#pkg_get_variable (stb_includedir stb includedir)
set(stb_includedir ${cmake_source_dir}/../stb_includedir_4cj_)
if (not stb_includedir)
  unset (stb_includedir)
  find_path (stb_includedir stb_image.h path_suffixes stb)
endif ()
if (not stb_includedir)
  message (fatal_error "stb_image.h not found")
endif ()

#set_target_properties(glslang::validator properties imported_location_debug "/home/cj/documents/vulkan-2024/lunarg-4cj-/1.3.290.0/source/glslang/build")
# extracted constant for the package name
set(glslang_package_name "glslang")
set(glslang_dir ${vulkan_sdk}/lib/cmake/glslang)
message(status ${glslang_dir})
# find the required package
find_package(${glslang_package_name} required)
# assuming you have a find_package for glslang
find_package(glslang required)

add_executable (glslang::validator imported)
find_program (glslang_validator "glslangvalidator" hints $env{vulkan_sdk}/bin required)
set_property (target glslang::validator property imported_location "${glslang_validator}")

## set the imported location for the debug configuration
#set_target_properties(glslang::validator properties
#        imported_location_debug "/home/cj/glslang/validator/debug/version"
#        imported_location_release "/home/cj/glslang/validator/release/version"
#        # you can add more configurations if needed
#)

function (add_shaders_target target)
  cmake_parse_arguments ("shader" "" "chapter_name" "sources" ${argn})
  set (shaders_dir ${shader_chapter_name}/shaders)
  add_custom_command (
    output ${shaders_dir}
    command ${cmake_command} -e make_directory ${shaders_dir}
    )
  set (shaders ${shaders_dir}/frag.spv ${shaders_dir}/vert.spv)
  # some chapters may have compute shaders in addition to vertex and fragment shaders,
  # so we conditionally check this and add them to the target
  string(find "${shader_sources}" "${chapter_shader}.comp" compute_shader_index)
  if (${compute_shader_index} greater -1)
    set (shaders ${shaders} ${shaders_dir}/comp.spv)
  endif()

  message(status "in add_shaders_target()")
  add_custom_command (
    output ${shaders}
    command glslang::validator
    args --target-env vulkan1.0 ${shader_sources} --quiet
    working_directory ${shaders_dir}
    depends ${shaders_dir} ${shader_sources}
    comment "compiling shaders"
    verbatim
  )
  add_custom_target (${target} depends ${shaders})
endfunction ()

function (add_chapter chapter_name)
  cmake_parse_arguments (chapter "" "shader" "libs;textures;models" ${argn})

  add_executable (${chapter_name} ${chapter_name}.cpp)
  set_target_properties (${chapter_name} properties
    runtime_output_directory ${cmake_binary_dir}/${chapter_name})
  set_target_properties (${chapter_name} properties cxx_standard 17)
  target_link_libraries (${chapter_name} vulkan::vulkan glfw)
  target_include_directories (${chapter_name} private ${stb_includedir})

  if (defined chapter_shader)
    message(status chapter_name:${chapter_name})
    set (chapter_shader_target ${chapter_name}_shader)
#    message(status chapter_shader_target:${chapter_shader_target})
#    message(status shader_sources:${shader_sources})
#    message(status ${chapter_shader}.frag)
#    message(status ${chapter_shader}.vert)
    file (glob shader_sources ${chapter_shader}.frag ${chapter_shader}.vert ${chapter_shader}.comp)
    message(status "will add_shaders_target")
    add_shaders_target (${chapter_shader_target} chapter_name ${chapter_name} sources ${shader_sources})
#    message(fatal_error 1234)
    message(status, "will add_dependencies")
    add_dependencies (${chapter_name} ${chapter_shader_target})
  endif ()
  if (defined chapter_libs)
    message(status "will target_link_libraries")
    target_link_libraries (${chapter_name} ${chapter_libs})
    message(status "exit target_link_libraries")
  endif ()
  message(status "defined chapter_models")
  if (defined chapter_models)
    file (copy ${chapter_models} destination ${cmake_binary_dir}/${chapter_name}/models)
  endif ()

  if (defined chapter_textures)
    file (copy ${chapter_textures} destination ${cmake_binary_dir}/${chapter_name}/textures)
  endif ()

endfunction ()

add_chapter (00_base_code)

add_chapter (01_instance_creation)
add_chapter (01_instance_creation_zcj)

add_chapter (02_validation_layers)
add_chapter (02_validation_layers_zcj)
add_chapter (02_validation_layers-2)

add_chapter (03_physical_device_selection)
add_chapter (03_physical_device_selection_zcj)

add_chapter (04_logical_device)
add_chapter (04_logical_device_zcj)
#add_chapter (04_logical_device-cj-04)

add_chapter (05_window_surface)
add_chapter (05_window_surface_zcj)
#add_chapter (05_cj_window_surface-cj-05)

add_chapter (06_swap_chain_creation)
add_chapter (06_swap_chain_creation_zcj)

add_chapter (07_image_views)
add_chapter (07_image_views_zcj)

add_chapter (08_graphics_pipeline)
add_chapter (08_graphics_pipeline_zcj)

add_chapter (09_shader_modules
  shader 09_shader_base)

add_chapter (09_shader_modules_zcj
        shader 09_shader_base)

add_chapter (10_fixed_functions
  shader 09_shader_base)
add_chapter (10_fixed_functions_zcj
        shader 09_shader_base)

add_chapter (11_render_passes
  shader 09_shader_base)
add_chapter (11_render_passes_zcj
        shader 09_shader_base)

add_chapter (12_graphics_pipeline_complete
  shader 09_shader_base)
add_chapter (12_graphics_pipeline_complete_zcj
        shader 09_shader_base)

add_chapter (13_framebuffers
  shader 09_shader_base)
add_chapter (13_framebuffers_zcj
        shader 09_shader_base)

add_chapter (14_command_buffers
  shader 09_shader_base)
add_chapter (14_command_buffers_zcj
        shader 09_shader_base)

#
add_chapter (15_hello_triangle
        shader 09_shader_base)
add_chapter (15_hello_triangle_zcj
        shader 09_shader_base)

add_chapter (16_frames_in_flight
        shader 09_shader_base)
add_chapter (16_frames_in_flight_zcj
        shader 09_shader_base)

#
add_chapter (17_swap_chain_recreation
  shader 09_shader_base)
add_chapter (17_swap_chain_recreation_zcj
        shader 09_shader_base)

add_chapter (18_vertex_input
  shader 18_shader_vertexbuffer
  libs glm::glm)
add_chapter (18_vertex_input_zcj
        shader 18_shader_vertexbuffer
        libs glm::glm)

add_chapter (19_vertex_buffer
  shader 18_shader_vertexbuffer
  libs glm::glm)
add_chapter (19_vertex_buffer_zcj
        shader 18_shader_vertexbuffer
        libs glm::glm)

add_chapter (20_staging_buffer
  shader 18_shader_vertexbuffer
  libs glm::glm)
add_chapter (20_staging_buffer_zcj
        shader 18_shader_vertexbuffer
        libs glm::glm)

add_chapter (21_index_buffer
  shader 18_shader_vertexbuffer
  libs glm::glm)
add_chapter (21_index_buffer_zcj
        shader 18_shader_vertexbuffer
        libs glm::glm)

add_chapter (22_descriptor_set_layout
  shader 22_shader_ubo
  libs glm::glm)
add_chapter (22_descriptor_set_layout_zcj
        shader 22_shader_ubo
        libs glm::glm)

add_chapter (23_descriptor_sets
  shader 22_shader_ubo
  libs glm::glm)
add_chapter (23_descriptor_sets_zcj
        shader 22_shader_ubo
        libs glm::glm)

add_chapter (24_texture_image
  shader 22_shader_ubo
  textures ../images/texture.jpg
  libs glm::glm)
add_chapter (24_texture_image_zcj
        shader 22_shader_ubo
        textures ../images/texture.jpg
        libs glm::glm)

add_chapter (25_sampler
  shader 22_shader_ubo
  textures ../images/texture.jpg
  libs glm::glm)
add_chapter (25_sampler_zcj
        shader 22_shader_ubo
        textures ../images/texture.jpg
        libs glm::glm)

add_chapter (26_texture_mapping
  shader 26_shader_textures
  textures ../images/texture.jpg
  libs glm::glm)
add_chapter (26_texture_mapping_zcj
        shader 26_shader_textures
        textures ../images/texture.jpg
        libs glm::glm)

add_chapter (27_depth_buffering
  shader 27_shader_depth
  textures ../images/texture.jpg
  libs glm::glm)
add_chapter (27_depth_buffering_zcj
        shader 27_shader_depth
        textures ../images/texture.jpg
        libs glm::glm)

add_chapter (28_model_loading
  shader 27_shader_depth
  models ../resources/viking_room.obj
  textures ../resources/viking_room.png
  libs glm::glm tinyobjloader::tinyobjloader)
add_chapter (28_model_loading_zcj
        shader 27_shader_depth
        models ../resources/viking_room.obj
        textures ../resources/viking_room.png
        libs glm::glm tinyobjloader::tinyobjloader)

add_chapter (29_mipmapping
  shader 27_shader_depth
  models ../resources/viking_room.obj
  textures ../resources/viking_room.png
  libs glm::glm tinyobjloader::tinyobjloader)
add_chapter (29_mipmapping_zcj
        shader 27_shader_depth
        models ../resources/viking_room.obj
        textures ../resources/viking_room.png
        libs glm::glm tinyobjloader::tinyobjloader)

add_chapter (30_multisampling
  shader 27_shader_depth
  models ../resources/viking_room.obj
  textures ../resources/viking_room.png
  libs glm::glm tinyobjloader::tinyobjloader)
add_chapter (30_multisampling_zcj
        shader 27_shader_depth
        models ../resources/viking_room.obj
        textures ../resources/viking_room.png
        libs glm::glm tinyobjloader::tinyobjloader)

add_chapter (31_compute_shader
  shader 31_shader_compute
  libs glm::glm)
add_chapter (31_compute_shader_zcj
        shader 31_shader_compute
        libs glm::glm)

if(not defined some_required_variable)
  message(status "final ending!!")
endif()